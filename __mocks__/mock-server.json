{
  "users": [
    {
      "id": "sdfds",
      "bountiesCreated": [
        {
          "id": "dfs",
          "bountyId": "abc123"
        }
      ],
      "bountiesClosed": [
        {
          "id": "dfs",
          "bountyId": "abc123"
        }
      ],
      "deposits": [
        {
          "id": "sdfds",
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "value": 1000000000000000000,
          "expiration": "2592000",
          "receiveTime": "1646012425",
          "bounty": {
            "id": "sdfsd",
            "bountyId": "abc123"
          }
        }
      ],
      "fundedTokenBalances": [
        {
          "id": "sdfd",
          "volume": 1000000000000000000,
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
        }
      ],
      "payouts": [
        {
          "id": "sdf",
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "value": 1000000000000000000,
          "payoutTime": 1232,
          "organization": {
            "id": "sdfsd"
          }
        }
      ]
    }
  ],
	"user":{
		"watchedBounties": {
			"bounties": [
				{"contractAddress": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e"}
			]
		}
	},
	"prismaBounty":{
		"watchingUsers": {
			"users": [
				{"userAddress": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e"}
			]
		}
	},
  "organizations": [
    {
      "id": "openqdev",
      "bountiesCreated": [
        {
          "id": "sdfds",
          "bountyId": "abc123",
          "issuer": {
            "id": "sfsd"
          },
          "bountyMintTime": 123,
          "bountyClosedTime": "sdfds",
          "deposits": {
            "id": "abc123",
            "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
            "value": 1000000000000000000,
            "expiration": "2592000",
            "receiveTime": "1646012425",
            "bounty": {
              "id": "dsfsd",
              "bountyId": "abc123"
            },
            "sender": {
              "id": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e"
            }
          },
          "status": "OPEN",
          "bountyAddress": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e",
          "bountyTokenBalances": [
            {
              "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
              "volume": 1000000000000000000
            }
          ]
        },
				 {
          "id": "sdfds",
          "bountyId": "abc123",
          "issuer": {
            "id": "sfsd"
          },
          "bountyMintTime": 123,
          "bountyClosedTime": "sdfds",
          "deposits": {
            "id": "abc123",
            "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
            "value": 1000000000000000000,
            "expiration": "2592000",
            "receiveTime": "1646012425",
            "bounty": {
              "id": "dsfsd",
              "bountyId": "abc123"
            },
            "sender": {
              "id": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e"
            }
          },
          "status": "OPEN",
          "bountyAddress": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e",
          "bountyTokenBalances": [
            {
              "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
              "volume": 1000000000000000000
            }
          ]
        }
				
      ],
      "fundedTokenBalances": [
        {
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "volume": 1000000000000000000
        }
      ],
      "deposits": [
        {
          "id": "abc123",
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "value": 1000000000000000000,
          "expiration": "2592000",
          "receiveTime": "1646012425",
          "bounty": {
            "id": "dsfsd",
            "bountyId": "abc123"
          },
          "sender": {
            "id": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e"
          }
        }
      ],
      "payouts": [
        {
          "id": "sdfsd",
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "payoutTime": "dsfsd",
          "payoutAddress": {
            "id": "sdfds"
          },
          "value": 1000000000000000000
        },
				{
          "id": "sdfsd",
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "payoutTime": "dsfsd",
          "payoutAddress": {
            "id": "sdsdffs"
          },
          "value": 1000000000000000000
        }
      ],
      "payoutTokenBalances": [
        {
          "id": "sdfsd",
          "volume": 1000000000000000000,
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
        }
      ]
    },
    {
      "id": "opensea",
      "bountiesCreated": [
        {
          "id": "sdfds",
          "bountyId": "abc123",
          "issuer": {
            "id": "sfsd"
          },
          "bountyMintTime": 123,
          "bountyClosedTime": "sdfds",
          "deposits": {
            "id": "abc123",
            "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
            "value": 1000000000000000000,
            "expiration": "2592000",
            "receiveTime": "1646012425",
            "bounty": {
              "id": "dsfsd",
              "bountyId": "abc123"
            },
            "sender": {
              "id": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e"
            }
          },
          "status": "OPEN",
          "bountyAddress": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e",
          "bountyTokenBalances": [
            {
              "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
              "volume": 1000000000000000000
            }
          ]
        }
      ],
      "fundedTokenBalances": [
        {
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "volume": 1000000000000000000
        }
      ],
      "deposits": [
        {
          "id": "abc123",
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "value": 1000000000000000000,
          "expiration": "2592000",
          "receiveTime": "1646012425",
          "bounty": {
            "id": "dsfsd",
            "bountyId": "abc123"
          },
          "sender": {
            "id": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e"
          }
        }
      ],
      "payouts": [
        {
          "id": "sdfsd",
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "payoutTime": "dsfsd",
          "payoutAddress": {
            "id": "sdfds"
          },
          "value": 1000000000000000000
        }
      ],
      "payoutTokenBalances": [
        {
          "id": "sdfsd",
          "volume": 1000000000000000000,
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
        }
      ]
    },
    {
      "id": "Apache Software Foundation",
      "bountiesCreated": [
        {
          "id": "sdfds",
          "bountyId": "abc123",
          "issuer": {
            "id": "sfsd"
          },
          "bountyMintTime": 123,
          "bountyClosedTime": "sdfds",
          "deposits": {
            "id": "abc123",
            "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
            "value": 1000000000000000000,
            "expiration": "2592000",
            "receiveTime": "1646012425",
            "bounty": {
              "id": "dsfsd",
              "bountyId": "abc123"
            },
            "sender": {
              "id": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e"
            }
          },
          "status": "OPEN",
          "bountyAddress": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e",
          "bountyTokenBalances": [
            {
              "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
              "volume": 1000000000000000000
            }
          ]
        }
      ],
      "fundedTokenBalances": [
        {
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "volume": 1000000000000000000
        }
      ],
      "deposits": [
        {
          "id": "abc123",
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "value": 1000000000000000000,
          "expiration": "2592000",
          "receiveTime": "1646012425",
          "bounty": {
            "id": "dsfsd",
            "bountyId": "abc123"
          },
          "sender": {
            "id": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e"
          }
        }
      ],
      "payouts": [
        {
          "id": "sdfsd",
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "payoutTime": "dsfsd",
          "payoutAddress": {
            "id": "sdfds"
          },
          "value": 1000000000000000000
        }
      ],
      "payoutTokenBalances": [
        {
          "id": "sdfsd",
          "volume": 1000000000000000000,
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
        }
      ]
    },
    {
      "id": "maker",
      "bountiesCreated": [
        {
          "id": "sdfds",
          "bountyId": "abc123",
          "issuer": {
            "id": "sfsd"
          },
          "bountyMintTime": 123,
          "bountyClosedTime": "sdfds",
          "deposits": {
            "id": "abc123",
            "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
            "value": 1000000000000000000,
            "expiration": "2592000",
            "receiveTime": "1646012425",
            "bounty": {
              "id": "dsfsd",
              "bountyId": "abc123"
            },
            "sender": {
              "id": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e"
            }
          },
          "status": "OPEN",
          "bountyAddress": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e",
          "bountyTokenBalances": [
            {
              "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
              "volume": 1000000000000000000
            }
          ]
        }
      ],
      "fundedTokenBalances": [
        {
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "volume": 1000000000000000000
        }
      ],
      "deposits": [
        {
          "id": "abc123",
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "value": 1000000000000000000,
          "expiration": "2592000",
          "receiveTime": "1646012425",
          "bounty": {
            "id": "dsfsd",
            "bountyId": "abc123"
          },
          "sender": {
            "id": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e"
          }
        }
      ],
      "payouts": [
        {
          "id": "sdfsd",
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "payoutTime": "dsfsd",
          "payoutAddress": {
            "id": "sdfds"
          },
          "value": 1000000000000000000
        }
      ],
      "payoutTokenBalances": [
        {
          "id": "sdfsd",
          "volume": 1000000000000000000,
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
        }
      ]
    }
  ],
  "bounty": 
   { 
      "id": "I_kwDOCUCQzM5H50v0",
      "bountyAddress": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e",
      "bountyId": "abc123",
      "bountyMintTime": "sdf",
      "bountyClosedTime": "sdf",
      "status": "sdf",
      "bountyTokenBalances": [
        {
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "volume": 10000000
        }
      ],
      "deposits": [
        {
          "id": "sdf",
          "refunded": false,
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "volume": 10000,
          "expiration": "2592000",
          "receiveTime": "1646012425",
          "sender": {
            "id": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e"
          }
        }
      ],
      "issuer": {
        "id": "sdf"
      }
    },
  
  "bounties": [
    {
      "id": "I_kwDOC0x8daf17a20c9dba35f005b6324f493785d239719dUCQzM5H50v0",
      "bountyAddress": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e",
      "bountyId": "I_kwDOCUCQzM5H50v0",
      "bountyMintTime": "sdf",
      "bountyClosedTime": "sdf",
      "status": "OPEN",
      "url": "https://github.com/OpenQDev/OpenQ-Frontend/issues/218",
			
			
      "deposits": [
        {
          "id": "sdf",
          "refunded": false,
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "volume": 10000,
          "expiration": "2592000",
          "receiveTime": "1646012425",
          "sender": {
            "id": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e"
          }
        }
      ],
      "bountyTokenBalances": [
        {
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "volume": 10000
        }
      ],
      "issuer": {
        "id": "sdf"
      }
    },
    {
      "id": "I_kwDOCUCQzM5H50v1",
      "bountyAddress": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e",
      "bountyId": "def123",
      "bountyMintTime": "sdf",
      "bountyClosedTime": "sdf",
      "status": "OPEN",
      "deposits": [],
      "url": "https://github.com/OpenQDev/OpenQ-Frontend/issues/218",
      "bountyTokenBalances": [
        {
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "volume": 100000000000000000000
        }
      ],
      "issuer": {
        "id": "sdf"
      }
    },
    {
      "id": "I_kwDOCUCQzM5H50v2",
      "bountyAddress": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e",
      "bountyId": "I_kwDOCUCQzM5H50v1",
      "bountyMintTime": "sdf",
      "bountyClosedTime": "sdf",
      "status": "CLOSED",
      "url": "https://github.com/OpenQDev/OpenQ-Frontend/issues/218",
      "deposits": [
        {
          "id": "sdf",
          "refunded": false,
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "volume": 100000000000000000000,
          "expiration": "2592000",
          "receiveTime": "1646012425",
          "sender": {
            "id": "0x1abcD810374b2C0fCDD11cFA280Df9dA7970da4e"
          }
        }
      ],
      "bountyTokenBalances": [
        {
          "tokenAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
          "volume": 100000000000000000000
        }
      ],
      "issuer": {
        "id": "sdf"
      }
    }],
  "fetchIssueById": [
    {
      "id": "I_kwDOCUCQzM5H50v0",
      "title": "sdfsdf",
      "body": "sdf",
      "repoName": "sdf",
      "owner": "alo9507",
			"assignees": {"nodes": []},  
		"languages": ["javascript", "java", "clojure", "HTML"],
		
      "avatarUrl": "https://avatars.githubusercontent.com/u/77402538?v=4",
      "createdAt": "sdf",
      "url": "https://github.com/OpenQDev/OpenQ-Frontend/issues/217",
      "labels": 
       [ {
          "name": "sdf",
          "color": "yellow"
        }]
      ,
      "closed": false,
      "titleHTML": "sdf",
      "bodyHTML": "<p dir=\"auto\">Descripription</p>\n<p dir=\"auto\">There is a problem with the test for the telephone validator. They pass validators which do not check for proper spacing or dashing. (i. e. my validator will return true for 55 55-55-555-5).<br>\nThis is the my code which passed the test, but really shouldn't have:</p>\n<div class=\"highlight highlight-source-js position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\n let firstReg=new RegExp(&quot;^\\-&quot;);\n  if(firstReg.test(str)){return false;}\n  let regEx= new RegExp(&quot;-&quot;,&quot;g&quot;);\n  console.log(firstReg);\n  let newStr=str.replace(regEx,&quot;&quot;);\n  let newRegEx= new RegExp(&quot; &quot;,&quot;g&quot;)\n  newStr=newStr.replace( newRegEx,&quot;&quot;);\n  console.log(newStr);\n  let regExArr=[/^\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/, /^[(]\\d\\d\\d[)]\\d\\d\\d\\d\\d\\d\\d$/, /^1[(]\\d\\d\\d[)]\\d\\d\\d\\d\\d\\d\\d$/, /^1\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/];\n  for(let i=0; i&lt;regExArr.length; i++){\n    if(regExArr[i].test(newStr)){\n      console.log(i);\n      return regExArr[i].test(newStr);\n    }```\"><pre> <span class=\"pl-k\">let</span> <span class=\"pl-s1\">firstReg</span><span class=\"pl-c1\">=</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"^\\-\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">firstReg</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">str</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span><span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span><span class=\"pl-kos\">;</span><span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">regEx</span><span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"-\"</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"g\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">firstReg</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">newStr</span><span class=\"pl-c1\">=</span><span class=\"pl-s1\">str</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">regEx</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">newRegEx</span><span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\" \"</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"g\"</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-s1\">newStr</span><span class=\"pl-c1\">=</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span> <span class=\"pl-s1\">newRegEx</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">regExArr</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">[</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span><span class=\"pl-kos\">[</span>(<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-kos\">[</span>)<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span>1<span class=\"pl-kos\">[</span>(<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-kos\">[</span>)<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span>1<span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">for</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">=</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-s1\">regExArr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">regExArr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">regExArr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-s\">``</span>`</pre></div>"
    },
    {
      "id": "I_kwDOCUCQzM5H50v1",
      "title": "sdfsdf",
      "body": "sdf",
			"assignees": {"nodes": []},  
		"languages": ["javascript", "java", "clojure", "HTML"],
      "url": "https://github.com/OpenQDev/OpenQ-Frontend/issues/218",
      "repoName": "sdf",
      "owner": "alo9507",
      "avatarUrl": "https://avatars.githubusercontent.com/u/77402538?v=4",
      "createdAt": "sdf",
      "labels": [
        {
          "name": "sdf",
          "color": "yellow"
        }

      ],
      "closed": false,
      "titleHTML": "sdf",
      "bodyHTML": "<p dir=\"auto\">Descripription</p>\n<p dir=\"auto\">There is a problem with the test for the telephone validator. They pass validators which do not check for proper spacing or dashing. (i. e. my validator will return true for 55 55-55-555-5).<br>\nThis is the my code which passed the test, but really shouldn't have:</p>\n<div class=\"highlight highlight-source-js position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\n let firstReg=new RegExp(&quot;^\\-&quot;);\n  if(firstReg.test(str)){return false;}\n  let regEx= new RegExp(&quot;-&quot;,&quot;g&quot;);\n  console.log(firstReg);\n  let newStr=str.replace(regEx,&quot;&quot;);\n  let newRegEx= new RegExp(&quot; &quot;,&quot;g&quot;)\n  newStr=newStr.replace( newRegEx,&quot;&quot;);\n  console.log(newStr);\n  let regExArr=[/^\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/, /^[(]\\d\\d\\d[)]\\d\\d\\d\\d\\d\\d\\d$/, /^1[(]\\d\\d\\d[)]\\d\\d\\d\\d\\d\\d\\d$/, /^1\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/];\n  for(let i=0; i&lt;regExArr.length; i++){\n    if(regExArr[i].test(newStr)){\n      console.log(i);\n      return regExArr[i].test(newStr);\n    }```\"><pre> <span class=\"pl-k\">let</span> <span class=\"pl-s1\">firstReg</span><span class=\"pl-c1\">=</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"^\\-\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">firstReg</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">str</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span><span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span><span class=\"pl-kos\">;</span><span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">regEx</span><span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"-\"</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"g\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">firstReg</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">newStr</span><span class=\"pl-c1\">=</span><span class=\"pl-s1\">str</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">regEx</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">newRegEx</span><span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\" \"</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"g\"</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-s1\">newStr</span><span class=\"pl-c1\">=</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span> <span class=\"pl-s1\">newRegEx</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">regExArr</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">[</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span><span class=\"pl-kos\">[</span>(<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-kos\">[</span>)<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span>1<span class=\"pl-kos\">[</span>(<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-kos\">[</span>)<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span>1<span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">for</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">=</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-s1\">regExArr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">regExArr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">regExArr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-s\">``</span>`</pre></div>"
    },
    {
      "id": "I_kwDOCUCQzM5H50v2",
      "title": "sdfsdf",
      "body": "sdf",
      "url": "https://github.com/OpenQDev/OpenQ-Frontend/issues/219",
      "repoName": "sdf",
      "owner": "alo9507",
			"assignees": {"nodes": [{"name": "Bill French"}]}, 
			
		"languages": ["javascript", "java", "clojure", "HTML"],
      "createdAt": "sdf",
      "labels": [
        {
          "name": "sdf",
          "color": "yellow"
        }
      ],
      "closed": false,
      "titleHTML": "sdf",
      "bodyHTML": "<p dir=\"auto\">Descripription</p>\n<p dir=\"auto\">There is a problem with the test for the telephone validator. They pass validators which do not check for proper spacing or dashing. (i. e. my validator will return true for 55 55-55-555-5).<br>\nThis is the my code which passed the test, but really shouldn't have:</p>\n<div class=\"highlight highlight-source-js position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\n let firstReg=new RegExp(&quot;^\\-&quot;);\n  if(firstReg.test(str)){return false;}\n  let regEx= new RegExp(&quot;-&quot;,&quot;g&quot;);\n  console.log(firstReg);\n  let newStr=str.replace(regEx,&quot;&quot;);\n  let newRegEx= new RegExp(&quot; &quot;,&quot;g&quot;)\n  newStr=newStr.replace( newRegEx,&quot;&quot;);\n  console.log(newStr);\n  let regExArr=[/^\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/, /^[(]\\d\\d\\d[)]\\d\\d\\d\\d\\d\\d\\d$/, /^1[(]\\d\\d\\d[)]\\d\\d\\d\\d\\d\\d\\d$/, /^1\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/];\n  for(let i=0; i&lt;regExArr.length; i++){\n    if(regExArr[i].test(newStr)){\n      console.log(i);\n      return regExArr[i].test(newStr);\n    }```\"><pre> <span class=\"pl-k\">let</span> <span class=\"pl-s1\">firstReg</span><span class=\"pl-c1\">=</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"^\\-\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">firstReg</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">str</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span><span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span><span class=\"pl-kos\">;</span><span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">regEx</span><span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"-\"</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"g\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">firstReg</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">newStr</span><span class=\"pl-c1\">=</span><span class=\"pl-s1\">str</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">regEx</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">newRegEx</span><span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\" \"</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"g\"</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-s1\">newStr</span><span class=\"pl-c1\">=</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span> <span class=\"pl-s1\">newRegEx</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">regExArr</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">[</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span><span class=\"pl-kos\">[</span>(<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-kos\">[</span>)<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span>1<span class=\"pl-kos\">[</span>(<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-kos\">[</span>)<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span>1<span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">for</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">=</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-s1\">regExArr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">regExArr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">regExArr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-s\">``</span>`</pre></div>"
    },
    {
      "id": "I_kwDOCUCQzM5H50v3",
      "title": "sdfsdf",
      "body": "sdf",     
      "url": "https://github.com/OpenQDev/OpenQ-Frontend/issues/220",
      "repoName": "sdf",
			"assignees": {"nodes": []},  
			
		"languages": ["javascript", "java", "clojure", "HTML"],
      "owner": "alo9507",
      "avatarUrl": "https://avatars.githubusercontent.com/u/77402538?v=4",
      "createdAt": "sdf",
      "labels": [
        {
          "name": "sdf",
          "color": "yellow"
        }
      ],
      "closed": false,
      "titleHTML": "sdf",
      "bodyHTML": "<p dir=\"auto\">Descripription</p>\n<p dir=\"auto\">There is a problem with the test for the telephone validator. They pass validators which do not check for proper spacing or dashing. (i. e. my validator will return true for 55 55-55-555-5).<br>\nThis is the my code which passed the test, but really shouldn't have:</p>\n<div class=\"highlight highlight-source-js position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\n let firstReg=new RegExp(&quot;^\\-&quot;);\n  if(firstReg.test(str)){return false;}\n  let regEx= new RegExp(&quot;-&quot;,&quot;g&quot;);\n  console.log(firstReg);\n  let newStr=str.replace(regEx,&quot;&quot;);\n  let newRegEx= new RegExp(&quot; &quot;,&quot;g&quot;)\n  newStr=newStr.replace( newRegEx,&quot;&quot;);\n  console.log(newStr);\n  let regExArr=[/^\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/, /^[(]\\d\\d\\d[)]\\d\\d\\d\\d\\d\\d\\d$/, /^1[(]\\d\\d\\d[)]\\d\\d\\d\\d\\d\\d\\d$/, /^1\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/];\n  for(let i=0; i&lt;regExArr.length; i++){\n    if(regExArr[i].test(newStr)){\n      console.log(i);\n      return regExArr[i].test(newStr);\n    }```\"><pre> <span class=\"pl-k\">let</span> <span class=\"pl-s1\">firstReg</span><span class=\"pl-c1\">=</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"^\\-\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">firstReg</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">str</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span><span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span><span class=\"pl-kos\">;</span><span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">regEx</span><span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"-\"</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"g\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">firstReg</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">newStr</span><span class=\"pl-c1\">=</span><span class=\"pl-s1\">str</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">regEx</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">newRegEx</span><span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\" \"</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"g\"</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-s1\">newStr</span><span class=\"pl-c1\">=</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span> <span class=\"pl-s1\">newRegEx</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">\"\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">regExArr</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">[</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span><span class=\"pl-kos\">[</span>(<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-kos\">[</span>)<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span>1<span class=\"pl-kos\">[</span>(<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-kos\">[</span>)<span class=\"pl-kos\">]</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">^</span>1<span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">\\d</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">for</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">=</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-s1\">regExArr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">regExArr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">regExArr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newStr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-s\">``</span>`</pre></div>"
    }
     ],
  "fetchIssueByUrl": [
    {
      "id": "I_kwDOCUCQzM5H50v0",
      "title": "sdfsdf",
      "body": "sdf",
      "url": "https://github.com/OpenQDev/OpenQ-Frontend/issues/218",
      "repoName": "openqdev",
      "owner": "alo9507",
      "avatarUrl": "https://avatars.githubusercontent.com/u/77402538?v=4",
      "createdAt": "sdf",
      "labels": [
        {
          "name": "sdf",
          "color": "yellow"
        }
      ],
      "closed": false,
      "titleHTML": "sdf",
      "bodyHTML": "sdf",
      "repository": {
        "owner": {
          "login": "alo9507"
        }
      }
    },
    {
      "id": "abc123",
      "title": "hgjkhg",
      "body": "ghjkghjk",
      "url": "https://github.com/OpenQDev/OpenQ-Frontend/issues/217",
      "repoName": "englebert",
      "owner": "alo9507",
      "avatarUrl": "https://avatars.githubusercontent.com/u/77402538?v=4",
      "createdAt": "sddddf",
      "labels": [
        {
          "name": "safdfdf",
          "color": "red"
        }
      ],
      "closed": false,
      "titleHTML": "jhjkjjjj",
      "bodyHTML": "oyuiyjjjhjkhjk",
      "repository": {
        "owner": {
          "login": "Christopher-Stevers"
        }
      }
    }
  ],
  "githubOrganizations": [
    {
      "name": "openqdev",
      "login": "openqdev",
      "id": "openqdev",
      "createdAt": "sdfsd",
      "description": "sdfsd",
      "email": "sdfsd",
      "websiteUrl": "sdfsd",
      "avatarUrl": "https://avatars.githubusercontent.com/u/77402538?v=4",
      "isVerified": "sdfsd",
      "descriptionHTML": "sdfsd",
      "twitterUsername": "sdf",
      "url": ""
    },
    {
      "name": "opensea",
      "login": "opensea",
      "id": "opensea",
      "createdAt": "sdfsd",
      "description": "sdfsd",
      "email": "sdfsd",
      "websiteUrl": "sdfsd",
      "avatarUrl": "https://avatars.githubusercontent.com/u/34966464?s=200&v=4",
      "isVerified": "sdfsd",
      "descriptionHTML": "sdfsd",
      "twitterUsername": "sdf",
      "url": ""
    },
    {
      "name": "Apache Software Foundation",
      "login": "Apache Software Foundation",
      "id": "Apache Software Foundation",
      "createdAt": "sdfsd",
      "description": "sdfsd",
      "email": "sdfsd",
      "websiteUrl": "sdfsd",
      "avatarUrl": "https://avatars.githubusercontent.com/u/47359?s=200&v=4",
      "isVerified": "sdfsd",
      "descriptionHTML": "sdfsd",
      "twitterUsername": "sdf",
      "url": ""
    },
    {
      "name": "maker",
      "login": "maker",
      "id": "maker",
      "createdAt": "sdfsd",
      "description": "sdfsd",
      "email": "sdfsd",
      "websiteUrl": "sdfsd",
      "avatarUrl": "https://avatars.githubusercontent.com/u/12523025?s=200&v=4",
      "isVerified": "sdfsd",
      "descriptionHTML": "sdfsd",
      "twitterUsername": "sdf",
      "url": ""
    }
  ],
  "githubIssues": [
    {
      "id": "I_kwDOCUCQzM5H50v0",
			"assignees": {"nodes": [{"name": "Bill French"}]},
      "title": "High",
				"languages":[{"name": "javascript"}],
      "body": "sdf456",
      "url": "https://github.com/OpenQDev/OpenQ-Frontend/issues/218",
      "repoName": "openqdev",
      "owner": "alo9507",
      "avatarUrl": "https://avatars.githubusercontent.com/u/12523025?s=200&v=4",
      "createdAt": "sdf",
      "labels": [
        {
          "name": "sdf",
          "color": "yellow"
        }
      ],
      "closed": false,
      "titleHTML": "sdf",
      "bodyHTML": "dfg",
      "repository": {
        "owner": {
          "login": "alo9507"
        }
      }
    },
    {
      "id": "I_kwDOCUCQzM5H50v1",
      "title": "UnfundedIssue",
      "body": "fgh456",
		"languages": ["javascript", "java", "clojure", "HTML"],
      "url": "",
      "repoName": "openqdev",
      "owner": "alo9507",
      "avatarUrl": "https://avatars.githubusercontent.com/u/77402538?v=4",
      "createdAt": "sdf",
      "labels": [
        {
          "name": "fgh",
          "color": "yellow"
        }
      ],
      "closed": false,
      "titleHTML": "sdf",
      "bodyHTML": "sdf",
      "repository": {
        "owner": {
          "login": "alo9507"
        }
      }
    },
    {
      "id": "I_kwDOCUCQzM5H50v2",
      "title": "Hey",
				"languages":[{"name": "javascript"}],
			"assignees": {"nodes": [{"name": "Bill French"}]},
      "body": "sdf456",
      "url": "",
      "repoName": "openqdev",
      "owner": "alo9507",
      "avatarUrl": "https://avatars.githubusercontent.com/u/77402538?v=4",
      "createdAt": "sdf",
      "labels": [
        {
          "name": "ijk",
          "color": "yellow"
        }
      ],
      "closed": false,
      "titleHTML": "sdf",
      "bodyHTML": "sdf",
      "repository": {
        "owner": {
          "login": "alo9507"
        }
      }
    },
    {
      "id": "I_kwDOCUCQzM5H50v3",
		"languages": ["javascript", "java", "clojure", "HTML"],
      "title": "hgjkhg",
			"assignees": {"nodes": [{"name": "Bill French"}]},
      "body": "ghjkghjk456",
      "url": "https://github.com/OpenQDev/OpenQ-Frontend/issues/217",
      "repoName": "englebert",
      "owner": "alo9507",
      "avatarUrl": "https://avatars.githubusercontent.com/u/77402538?v=4",
      "createdAt": "sddddf",
      "labels": [
        {
          "name": "safdfdf",
          "color": "red"
        }
      ],
      "closed": false,
      "titleHTML": "jhjkjjjj",
      "bodyHTML": "oyuiyjjjhjkhjk",
      "repository": {
        "owner": {
          "login": "Christopher-Stevers"
        }
      }
    }
  ],
  "checkAuth": {
    "data": {
      "isAuthenticated": true
    }
  },
  "logout": {
    "data": {
      "isAuthenticated": true
    }
  },
  "tvl": {"tokenPrices":{"0x5fbdb2315678afecb367f032d93f642f64180aa3":10.66},"tokens":{"0x5fbdb2315678afecb367f032d93f642f64180aa3":100.32},"total":24.04},
  "openq-bot": {
    "created": "sdf",
    "refunded": false,
    "funded": "sdf"
  },
	
"getToken":	{
		"name": "Matic",
		"address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
		"symbol": "MATIC",
		"decimals": 14,
		"chainId": 80001,
		"path": "/crypto-logos/MATIC.svg"
	},

"metadata":
[
	{
		"name": "Matic",
		"address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
		"symbol": "MATIC",
		"decimals": 18,
		"chainId": 80001,
		"path": "/crypto-logos/MATIC.svg"
	},
	{
		"name": "Chainlink Token",
		"address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
		"symbol": "LINK",
		"decimals": 18,
		"chainId": 80001,
		"path": "/crypto-logos/LINK.svg"
	},
	{
		"name": "Dummy ERC20",
		"address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
		"symbol": "DERC20",
		"decimals": 18,
		"chainId": 80001,
		"path": "/crypto-logos/DAI.svg"
	},
	{
		"name": "Dummy ERC20 (Blacklisted)",
		"address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
		"symbol": "BDERC20",
		"decimals": 18,
		"chainId": 80001,
		"path": "/crypto-logos/DAI.svg"
	},
	{
		"name": "Wrapped Matic",
		"address": "0xd0A1E359811322d97991E03f863a0C30C2cF029C",
		"symbol": "WMATIC",
		"decimals": 18,
		"chainId": 80001,
		"path": "/crypto-logos/MATIC.svg"
	},
	{
		"name": "Dai Stablecoin",
		"address": "0xcB1e72786A6eb3b44C2a2429e317c8a2462CFeb1",
		"symbol": "DAI",
		"decimals": 18,
		"chainId": 80001,
		"path": "/crypto-logos/DAI.svg"
	},
	{
		"name": "Tether USD",
		"address": "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
		"symbol": "USDT",
		"decimals": 6,
		"chainId": 80001,
		"path": "/crypto-logos/USDT.svg"
	},
	{
		"name": "Wrapped Ether",
		"address": "0x714550C2C1Ea08688607D86ed8EeF4f5E4F22323",
		"symbol": "WETH",
		"decimals": 18,
		"chainId": 80001,
		"path": "/crypto-logos/ETH.svg"
	}
],
"tokenMetadata":	{ "name": "Chainlink Token", "address": "0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39", "symbol": "LINK", "decimals": 18, "chainId": 80001, "path": "/crypto-logos/LINK.svg" },
  "txnResponse": {
    "to": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": {
      "_hex": "0x07baa5",
      "_isBigNumber": true
    },
    "logsBloom": "0x000000000000000000000000000000000000000000000000000000000containsSearch && containsTag && (localShowUnfunded || isFunded) && (localShowClaimed || isUnclaimed) && bounty.url)bou00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080001008000000100000000000000000004000800000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000800080000000000000080000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000040000000000000020000000800000000000000000000000000000000400000000000000001001000004000180000000000000",
    "blockHash": "0x212935bbb943ce9c0f60efe80c28af593dcbafcb312dc331c44960c58de454b2",
    "transactionHash": "0x6bede2b3aa1ab6939a84521dd3daf123501392f3ece8f26a5e8c15b556fd6a1d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 58,
        "transactionHash": "0x6bede2b3aa1ab6939a84521dd3daf123501392f3ece8f26a5e8c15b556fd6a1d",
        "address": "0xf8C138968e52774f5756844ADa09D5096Dc5Aea8",
        "topics": [
          "0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e",
          "0x0000000000000000000000008a791620dd6260079bf849dc5567adc3f2fdc318"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x212935bbb943ce9c0f60efe80c28af593dcbafcb312dc331c44960c58de454b2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 58,
        "transactionHash": "0x6bede2b3aa1ab6939a84521dd3daf123501392f3ece8f26a5e8c15b556fd6a1d",
        "address": "0xf8C138968e52774f5756844ADa09D5096Dc5Aea8",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 1,
        "blockHash": "0x212935bbb943ce9c0f60efe80c28af593dcbafcb312dc331c44960c58de454b2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 58,
        "transactionHash": "0x6bede2b3aa1ab6939a84521dd3daf123501392f3ece8f26a5e8c15b556fd6a1d",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x9b4ec425461e6b6e22c6b5a40c3fba7c8200dbc1832b92910140d4311872c139",
          "0x000000000000000000000000f8c138968e52774f5756844ada09d5096dc5aea8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb9226600000000000000000000000000000000000000000000000000000000627563430000000000000000000000000000000000000000000000000000000000000012495f6b77444f435543517a4d354835307630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000204d4445794f6b39795a3246756158706864476c76626a45794e54497a4d444931",
        "logIndex": 2,
        "blockHash": "0x212935bbb943ce9c0f60efe80c28af593dcbafcb312dc331c44960c58de454b2"
      }
    ],
    "blockNumber": 58,
    "confirmations": 1,
    "cumulativeGasUsed": {
      "_hex": "0x07baa5",
      "_isBigNumber": true
    },
    "effectiveGasPrice": {
      "_hex": "0x01888c060c",
      "_isBigNumber": true
    },
    "status": 1,
    "type": 2,
    "byzantium": true,
    "events": [
      {
        "transactionIndex": 0,
        "blockNumber": 58,
        "transactionHash": "0x6bede2b3aa1ab6939a84521dd3daf123501392f3ece8f26a5e8c15b556fd6a1d",
        "address": "0xf8C138968e52774f5756844ADa09D5096Dc5Aea8",
        "topics": [
          "0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e",
          "0x0000000000000000000000008a791620dd6260079bf849dc5567adc3f2fdc318"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x212935bbb943ce9c0f60efe80c28af593dcbafcb312dc331c44960c58de454b2",
        "args": [
          "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318"
        ],
        "event": "BeaconUpgraded",
        "eventSignature": "BeaconUpgraded(address)"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 58,
        "transactionHash": "0x6bede2b3aa1ab6939a84521dd3daf123501392f3ece8f26a5e8c15b556fd6a1d",
        "address": "0xf8C138968e52774f5756844ADa09D5096Dc5Aea8",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 1,
        "blockHash": "0x212935bbb943ce9c0f60efe80c28af593dcbafcb312dc331c44960c58de454b2",
        "args": [
          1
        ],
        "event": "Initialized",
        "eventSignature": "Initialized(uint8)"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 58,
        "transactionHash": "0x6bede2b3aa1ab6939a84521dd3daf123501392f3ece8f26a5e8c15b556fd6a1d",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x9b4ec425461e6b6e22c6b5a40c3fba7c8200dbc1832b92910140d4311872c139",
          "0x000000000000000000000000f8c138968e52774f5756844ada09d5096dc5aea8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb9226600000000000000000000000000000000000000000000000000000000627563430000000000000000000000000000000000000000000000000000000000000012495f6b77444f435543517a4d354835307630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000204d4445794f6b39795a3246756158706864476c76626a45794e54497a4d444931",
        "logIndex": 2,
        "blockHash": "0x212935bbb943ce9c0f60efe80c28af593dcbafcb312dc331c44960c58de454b2",
        "args": [
          "I_kwDOCUCQzM5H50v0",
          "MDEyOk9yZ2FuaXphdGlvbjEyNTIzMDI1",
          "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
          "0xf8C138968e52774f5756844ADa09D5096Dc5Aea8",
          {
            "_hex": "0x62756343",
            "_isBigNumber": true
          }
        ],
        "event": "BountyCreated",
        "eventSignature": "BountyCreated(string,string,address,address,uint256)"
      }
    ]
  }
}
